# Include necessary libraries
#include <WiFi.h>
#include <WebServer.h>
#include <Adafruit_MPU6050.h>
#include <Adafruit_Sensor.h>
#include <Wire.h>
#include <HTTPClient.h>
#include <TinyGPS++.h>
#include <HardwareSerial.h>

// WiFi credentials (Replace with your own WiFi SSID and password)
const char* ssid = "Your_SSID";
const char* password = "Your_PASSWORD";

// Telegram bot credentials (Replace with your own Bot Token and Chat ID)
const String botToken = "Your_Bot_Token";
const String chatID = "Your_Chat_ID";

// Web server and sensor objects
WebServer server(80);
Adafruit_MPU6050 mpu;
TinyGPSPlus gps;
HardwareSerial gpsSerial(1);

// Buzzer configuration
const int buzzerPin = 23;
bool buzzerActive = false;
unsigned long buzzerStartTime = 0;

void setup() {
    Serial.begin(115200);
    pinMode(buzzerPin, OUTPUT);
    digitalWrite(buzzerPin, LOW);

    // Initialize MPU6050
    if (!mpu.begin()) {
        Serial.println("Failed to find MPU6050 chip");
        while (1) delay(10);
    }
    Serial.println("MPU6050 Found!");

    // Initialize GPS module
    gpsSerial.begin(9600, SERIAL_8N1, 16, 17);

    // Connect to WiFi
    connectWiFi();

    // Set up server routes
    server.on("/alert", handleAlert);
    server.begin();
    Serial.println("Server started");
}

void loop() {
    server.handleClient(); // Handle incoming HTTP requests
    checkFallDetection(); // Monitor fall detection
    readGPS(); // Read GPS data
    handleBuzzer(); // Manage buzzer state
}

// Function to connect to WiFi with retry logic
void connectWiFi() {
    Serial.println("Connecting to WiFi...");
    int retryCount = 0;
    WiFi.begin(ssid, password);
    while (WiFi.status() != WL_CONNECTED && retryCount < 10) {
        delay(1000);
        Serial.print(".");
        retryCount++;
    }
    if (WiFi.status() == WL_CONNECTED) {
        Serial.println("Connected to WiFi");
        Serial.println(WiFi.localIP());
    } else {
        Serial.println("Failed to connect to WiFi");
    }
}

// Handle HTTP alert requests
void handleAlert() {
    String alertType = server.arg("alert");
    if (alertType == "drowsy" || alertType == "no_face") {
        Serial.println("Activating buzzer for alert: " + alertType);
        activateBuzzer();
        server.send(200, "text/plain", "Buzzer activated");
    } else {
        server.send(400, "text/plain", "Invalid alert type");
    }
}

// Activate buzzer for 1 second
void activateBuzzer() {
    buzzerActive = true;
    buzzerStartTime = millis();
    digitalWrite(buzzerPin, HIGH);
}

// Handle buzzer timing
void handleBuzzer() {
    if (buzzerActive && millis() - buzzerStartTime >= 1000) {
        digitalWrite(buzzerPin, LOW);
        buzzerActive = false;
    }
}

// Send alert message via Telegram
void sendTelegramAlert(const String& message) {
    if (WiFi.status() == WL_CONNECTED) {
        HTTPClient http;
        String url = "https://api.telegram.org/bot" + botToken + "/sendMessage?chat_id=" + chatID + "&text=" + message;
        http.begin(url);
        int httpResponseCode = http.GET();
        Serial.println(httpResponseCode > 0 ? http.getString() : "Error sending message");
        http.end();
    } else {
        Serial.println("WiFi not connected, unable to send message.");
    }
}

// Check for fall detection based on acceleration values
void checkFallDetection() {
    sensors_event_t a, g, temp;
    mpu.getEvent(&a, &g, &temp);
    if (abs(a.acceleration.x) > 2.0 || abs(a.acceleration.y) > 2.0 || a.acceleration.z < 1.5) {
        Serial.println("Fall Detected!");
        activateBuzzer();
        sendTelegramAlert("Fall detected! Immediate assistance required.");
        if (gps.location.isUpdated()) {
            sendTelegramAlert("Location: " + String(gps.location.lat(), 6) + ", " + String(gps.location.lng(), 6));
        } else {
            sendTelegramAlert("Location: GPS data not available.");
        }
        delay(2000);
    }
}

// Read GPS data and print if updated
void readGPS() {
    while (gpsSerial.available() > 0) {
        gps.encode(gpsSerial.read());
        if (gps.location.isUpdated()) {
            Serial.print("Latitude: ");
            Serial.print(gps.location.lat(), 6);
            Serial.print(", Longitude: ");
            Serial.println(gps.location.lng(), 6);
        }
    }
}
